{"version":3,"sources":["services/CuriosityApiClient.js","components/LastQueryPageComponent.js","services/ChampionshipApiClient.js","components/LeaderBoardComponent.js","components/CuriosityComponent.js","App.js","reportWebVitals.js","index.js"],"names":["CuriosityApiClient","user","query","originalQuery","fetch","SERVER_CURIOSITY_URL","GET_PAGE","GET_TOPICS","userName","console","log","GET_STATS","userIds","GET_USERS_BY_IDS","join","LastQueryPageComponent","this","props","queryPageList","map","a","id","React","ChampionshipApiClient","SERVER_CHAMPIONSHIP_URL","GET_LEADERBOARD","LeaderBoardComponent","state","leaderboard","serverError","refreshLeaderBoard","setInterval","bind","leaderBoard","then","lbRes","ok","json","Promise","reject","getUsers","usRes","lb","setState","getLeaderBoardData","lbData","row","userId","length","getUserAliasData","data","userMap","Map","forEach","idAlias","set","get","updateLeaderBoard","catch","reason","alias","totalScore","badges","b","className","ChallengeComponent","message","queryTopics","curiosityUrl","topic1","topic2","topic3","handleSubmitGetCuriosity","handleChange","handleSubmitGetPages","topic","curiosity","res","updateMessage","title","keyUrl","updateLastQueryPages","alert","event","name","target","value","m","preventDefault","getTopics","Object","keys","pages","pagesIdArray","getStats","querypage","item","push","theme","blue","default","hover","green","pink","Button","styled","button","defaultProps","onSubmit","type","maxLength","onChange","onClick","width","height","src","App","CuriosityComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d15f9164.chunk.js","sourcesContent":["class CuriosityApiClient {\n\n\n    static SERVER_CURIOSITY_URL =   'http://132.226.205.181'; //Kubernetes LoadBalancer IP  // 'http://localhost:8090'; //hip.a) 'http://132.226.199.186' //hipb) 'http://0.0.0.0:8090 \n    //static SERVER_CURIOSITY_URL = 'http://localhost:8090'; //uncomment this line for local testing\n    \n    static GET_PAGE = '/wiki/curiosity/page';\n\n    static GET_TOPICS = '/wiki/curiosity/topics'; \n\n    static GET_STATS = '/wiki/curiosity/stats?userName=';\n\n    static GET_USERS_BY_IDS = '/wiki/curiosity/users/';\n\n    static curiosity(user: string,\n                     query: string,\n                     originalQuery: string): Promise<Response> {\n\n                        //console.log(user +\"---\"+query+\"---\"+originalQuery);\n\n        return fetch(CuriosityApiClient.SERVER_CURIOSITY_URL + CuriosityApiClient.GET_PAGE + \"/\" + user + \"/\" + query + \"/\" + originalQuery );\n    }\n\n    static getTopics(user: string,\n                     query: string): Promise<Response> {\n\n        return fetch(CuriosityApiClient.SERVER_CURIOSITY_URL + CuriosityApiClient.GET_TOPICS + \"/\" + user + \"/\" + query);\n    }\n\n    static getStats(userName: string): Promise<Response> {\n\n        console.log(\"userName for Stats :\"+userName);\n\n\n        return fetch(CuriosityApiClient.SERVER_CURIOSITY_URL + CuriosityApiClient.GET_STATS + userName);\n    }\n\n    static getUsers(userIds: number[]): Promise<Response> {\n        return fetch(CuriosityApiClient.SERVER_CURIOSITY_URL + CuriosityApiClient.GET_USERS_BY_IDS  + userIds.join(','));\n    }\n\n   // static getUsers2(userIds: number[]): Promise<Response> {\n   //     return fetch('http://localhost:8090/wiki/curiosity/users/' + userIds.join(','))\n           // .then(res => res.text())\n           // .then(text => console.log(text));\n   // }\n    \n\n}\n\nexport default CuriosityApiClient;\n","import * as React from 'react';\n\nclass LastQueryPageComponent extends React.Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                <tr>\n                 \n                    <th>Original Query</th>\n                    <th>Query</th>\n                </tr>\n                </thead>\n                <tbody>\n                 {this.props.queryPageList.map(a =>\n                    <tr key={a.id}>\n         \n                        <td>{a.originalQuery}</td>\n                        <td>{a.query}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default LastQueryPageComponent;","class ChampionshipApiClient {\n\n    static SERVER_CHAMPIONSHIP_URL = 'http://132.226.193.189'\n    //static SERVER_URL = 'http://localhost:8091'; //uncomment for localtesting\n    //temp LB: 132.226.193.189 \n    //ClusterIP 'http://10.96.84.52'\n    static GET_LEADERBOARD = '/leaders';\n\n    static leaderBoard(): Promise<Response> {\n        return fetch(ChampionshipApiClient.SERVER_CHAMPIONSHIP_URL +\n            ChampionshipApiClient.GET_LEADERBOARD);\n    }\n\n}\n\nexport default ChampionshipApiClient;","import * as React from 'react';\nimport ChampionshipApiClient from '../services/ChampionshipApiClient';\nimport CuriosityApiClient from '../services/CuriosityApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return ChampionshipApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Champioship: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return CuriosityApiClient.getUsers(userIds).then(\n           // return CuriosityApiClient.getUsers().then(\n            usRes => {\n                if(usRes.ok) {\n                   // console.log(usRes);\n                   // console.log(usRes.text());\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Curiosity: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                 console.log(\"lbData :\");\n                  console.log(lbData);\n                let userIds = lbData.map(row => row.userId);\n                 console.log(\"userIds :\");\n                  console.log(userIds);\n                if(userIds.length > 0) {\n                    console.log(userIds.length);\n                    this.getUserAliasData(userIds).then(data => {\n                        console.log(\"data :\");\n                        console.log(data);\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.userName);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Champioship server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Curiosity Championship</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport CuriosityApiClient from \"../services/CuriosityApiClient\";\nimport LastQueryPageComponent from './LastQueryPageComponent';\nimport LeaderBoardComponent from './LeaderBoardComponent';\n\n\n\nclass ChallengeComponent extends React.Component {\n  \n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n          \n            user: '',\n            message: 'I want to know about...',\n            query: '?',\n            queryTopics: '',\n            originalQuery: 'OldValueDude',\n            curiosityUrl: 'https://www.wikipedia.org/',\n            topic1: '',\n            topic2: '',\n            topic3: '',\n            queryPageList: []\n        };\n\n        this.handleSubmitGetCuriosity = this.handleSubmitGetCuriosity.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmitGetPages = this.handleSubmitGetPages.bind(this);\n    }\n\n\n    \n    componentDidMount(): void {\n   \n    }\n\n\n    handleSubmitGetCuriosity(topic: string, user: string, originalQuery: string) {\n        //get page\n        //this.state.originalQuery = this.state.query;\n         CuriosityApiClient.curiosity(user, topic, originalQuery).then(\n            res => {\n                if (res.ok) {\n                    this.updateMessage(\"Oki! Here you have all you need to know about...\");\n                    res.json().then(json => {\n                        this.setState({\n                            //originalQuery: this.state.query,\n                            query: json.title, \n                            curiosityUrl: json.keyUrl             \n                        });\n                    });\n                    this.updateLastQueryPages(this.state.user);\n                    } else {\n                        alert(\"Ups! I have a little problem!\");\n                        this.updateMessage(\"Can't reach the server - Res in NoK! Make sure you have nickname!\");\n                }\n            }\n        ); \n        \n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n\n    updateMessage(m: string) {\n        this.setState({\n          message: m\n        });\n    }\n\n    handleSubmitGetPages(event) {\n        event.preventDefault();\n        CuriosityApiClient.getTopics(this.state.user,this.state.query).then(\n            res => {\n                if (res.ok) {\n                    this.updateMessage(\"There are a few articles available for your curiosity\");\n                    res.json().then(json => {\n                        console.log(Object.keys(json.query.pages));\n                        const pagesIdArray = Object.keys(json.query.pages);\n                        this.setState({\n                            originalQuery: this.state.query,\n                            topic1: json.query.pages[pagesIdArray[0]].title, \n                            topic2: json.query.pages[pagesIdArray[1]].title,\n                            topic3: json.query.pages[pagesIdArray[2]].title\n                        });\n                    });\n                    this.updateLastQueryPages(this.state.user);\n                    } else {\n                        alert(\"Ups! I have a little problem!\");\n                        this.updateMessage(\"Please make sure you have nickname or a proper query\");\n                  \n                }\n\n            }\n        ); \n    }\n\n    updateLastQueryPages(userName: string) {\n        CuriosityApiClient.getStats(userName).then(res => {\n            if (res.ok) {\n                let querypage: QueryPage[] = [];\n                res.json().then(data => {\n                    data.forEach(item => {\n                        querypage.push(item);\n                    });\n                    this.setState({\n                        queryPageList: querypage\n                    });\n                })\n            }\n        })\n    }\n\n    render() {\n        \n    const theme = {\n        blue: {\n            default: \"#3f51b5\",\n            hover: \"#283593\"\n        },\n        green: {\n            default: \"#d4e157\",\n            hover: \"#616b57\"\n        },\n        pink: {\n            default: \"#e91e63\",\n            hover: \"#ad1457\"\n        }\n    };\n\n    const Button = styled.button`\n    background-color: ${(props) => theme[props.theme].default};\n    color: white;\n    padding: 5px 15px;\n    border-radius: 5px;\n    outline: 0;\n    text-transform: uppercase;\n    margin: 10px 0px;\n    cursor: pointer;\n    box-shadow: 0px 2px 2px lightgray;\n    transition: ease background-color 250ms;\n    &:hover {\n        background-color: ${(props) => theme[props.theme].hover};\n    }\n    &:disabled {\n        cursor: default;\n        opacity: 0.7;\n    }\n    `;\n\n    Button.defaultProps = {\n    theme: \"blue\"\n    };\n\n        \n        return (\n           \n            <div>\n     \n\n                <h1>WikipediA CuriositieS Dev</h1>\n                <h5>{this.state.message}</h5>\n                \n                <div>\n                 <LeaderBoardComponent/>\n                    <h2>\n                        {this.state.query}\n                    </h2>\n                </div>\n                <form onSubmit={this.handleSubmitGetPages}>\n                    <label>\n                        Name:\n                        <input type=\"text\" maxLength=\"24\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Query:\n                        <input type=\"text\" maxLength=\"24\"\n                               name=\"query\"\n                               value={this.state.query}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    \n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n\n                <div>\n                    <h3>Available Articles</h3>\n                    <h3>\n                     <Button onClick={() => this.handleSubmitGetCuriosity(this.state.topic1, this.state.user, this.state.originalQuery)}> {this.state.topic1} </Button>              \n                     <Button theme=\"pink\" onClick={() => this.handleSubmitGetCuriosity(this.state.topic2, this.state.user, this.state.originalQuery)}> {this.state.topic2} </Button>\n                     <Button theme=\"green\" onClick={() => this.handleSubmitGetCuriosity(this.state.topic3, this.state.user, this.state.originalQuery)}> {this.state.topic3} </Button>\n                      </h3>\n                </div>\n              \n              \n                   <div>   \n                    <iframe width=\"100%\" height=\"400\" src={this.state.curiosityUrl} title=\"Wikipedia Page\"></iframe>\n                </div>\n                 <div> \n                  <h3>{this.state.user} Statistics</h3> \n                    <LastQueryPageComponent queryPageList={this.state.queryPageList}/>\n                    \n              </div>\n     \n            </div>\n            \n            \n        );\n    \n        \n    \n    }\n    \n}\n\n\nexport default ChallengeComponent;","import React from 'react';\nimport './App.css';\nimport CuriosityComponent from './components/CuriosityComponent';\n\n\nfunction App() {\n    return <CuriosityComponent/>;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}